// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: cache.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddleshimClient is the client API for Middleshim service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddleshimClient interface {
	Lock(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error)
	GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionRequest, error)
	SetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Update(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CacheMiss(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Validate1(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*ErrorResponse, error)
	Validate2(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*ErrorResponse, error)
}

type middleshimClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddleshimClient(cc grpc.ClientConnInterface) MiddleshimClient {
	return &middleshimClient{cc}
}

func (c *middleshimClient) Lock(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*KeyResponse, error) {
	out := new(KeyResponse)
	err := c.cc.Invoke(ctx, "/middleshim/Lock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) GetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*SessionRequest, error) {
	out := new(SessionRequest)
	err := c.cc.Invoke(ctx, "/middleshim/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) SetSession(ctx context.Context, in *SessionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/middleshim/SetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) Update(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/middleshim/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) CacheMiss(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/middleshim/CacheMiss", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) Validate1(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/middleshim/validate1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middleshimClient) Validate2(ctx context.Context, in *KeyValuePair, opts ...grpc.CallOption) (*ErrorResponse, error) {
	out := new(ErrorResponse)
	err := c.cc.Invoke(ctx, "/middleshim/validate2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddleshimServer is the server API for Middleshim service.
// All implementations must embed UnimplementedMiddleshimServer
// for forward compatibility
type MiddleshimServer interface {
	Lock(context.Context, *KeyRequest) (*KeyResponse, error)
	GetSession(context.Context, *SessionRequest) (*SessionRequest, error)
	SetSession(context.Context, *SessionRequest) (*emptypb.Empty, error)
	Update(context.Context, *KeyValuePair) (*emptypb.Empty, error)
	CacheMiss(context.Context, *KeyRequest) (*emptypb.Empty, error)
	Validate1(context.Context, *KeyValuePair) (*ErrorResponse, error)
	Validate2(context.Context, *KeyValuePair) (*ErrorResponse, error)
	mustEmbedUnimplementedMiddleshimServer()
}

// UnimplementedMiddleshimServer must be embedded to have forward compatible implementations.
type UnimplementedMiddleshimServer struct {
}

func (UnimplementedMiddleshimServer) Lock(context.Context, *KeyRequest) (*KeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedMiddleshimServer) GetSession(context.Context, *SessionRequest) (*SessionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedMiddleshimServer) SetSession(context.Context, *SessionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSession not implemented")
}
func (UnimplementedMiddleshimServer) Update(context.Context, *KeyValuePair) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMiddleshimServer) CacheMiss(context.Context, *KeyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheMiss not implemented")
}
func (UnimplementedMiddleshimServer) Validate1(context.Context, *KeyValuePair) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate1 not implemented")
}
func (UnimplementedMiddleshimServer) Validate2(context.Context, *KeyValuePair) (*ErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate2 not implemented")
}
func (UnimplementedMiddleshimServer) mustEmbedUnimplementedMiddleshimServer() {}

// UnsafeMiddleshimServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddleshimServer will
// result in compilation errors.
type UnsafeMiddleshimServer interface {
	mustEmbedUnimplementedMiddleshimServer()
}

func RegisterMiddleshimServer(s grpc.ServiceRegistrar, srv MiddleshimServer) {
	s.RegisterService(&Middleshim_ServiceDesc, srv)
}

func _Middleshim_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).Lock(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).GetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_SetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).SetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/SetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).SetSession(ctx, req.(*SessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).Update(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_CacheMiss_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).CacheMiss(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/CacheMiss",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).CacheMiss(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_Validate1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).Validate1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/validate1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).Validate1(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleshim_Validate2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyValuePair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddleshimServer).Validate2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/middleshim/validate2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddleshimServer).Validate2(ctx, req.(*KeyValuePair))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleshim_ServiceDesc is the grpc.ServiceDesc for Middleshim service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleshim_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "middleshim",
	HandlerType: (*MiddleshimServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lock",
			Handler:    _Middleshim_Lock_Handler,
		},
		{
			MethodName: "GetSession",
			Handler:    _Middleshim_GetSession_Handler,
		},
		{
			MethodName: "SetSession",
			Handler:    _Middleshim_SetSession_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Middleshim_Update_Handler,
		},
		{
			MethodName: "CacheMiss",
			Handler:    _Middleshim_CacheMiss_Handler,
		},
		{
			MethodName: "validate1",
			Handler:    _Middleshim_Validate1_Handler,
		},
		{
			MethodName: "validate2",
			Handler:    _Middleshim_Validate2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cache.proto",
}
